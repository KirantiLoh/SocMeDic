generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Post {
  id           String         @id @default(cuid())
  senderId     String
  content      String
  createdAt    DateTime       @default(now())
  LikedPost    LikedPost[]
  sender       User           @relation("posts", fields: [senderId], references: [id], onDelete: Cascade)
  ReportedPost ReportedPost[]
  isPrivate      Boolean        @default(false)
}

model LikedPost {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReportedPost {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model Follower {
  id            String   @id @default(cuid())
  userId        String
  followingId   String
  createdAt     DateTime @default(now())
  following     User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  user          User     @relation("followed", fields: [userId], references: [id], onDelete: Cascade)
  isCloseFriend Boolean  @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  accounts      Account[]
  followers     Follower[]     @relation("following")
  following     Follower[]     @relation("followed")
  LikedPost     LikedPost[]
  posts         Post[]         @relation("posts")
  sessions      Session[]
  ReportedPost  ReportedPost[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
